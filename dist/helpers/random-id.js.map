{"version":3,"sources":["../../src/helpers/random-id.ts"],"names":["idFor","collection","type","length","id","exactly","join","crypto","randomBytes","toString","Map","has","hasOwnProperty","byteIdFor","wordIdFor","randomNumber","min","max","Math","random","randomInt","round"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,KAAK,GAAG,CAACC,UAAD,EAAaC,IAAb,EAAmBC,MAAnB,KAAuC;AACpD,QAAMC,EAAE,GAAIF,IAAI,KAAK,OAAV,GACR,0BAAY;AAAEG,IAAAA,OAAO,EAAEF,MAAM,IAAI,CAArB;AAAwBG,IAAAA,IAAI,EAAE;AAA9B,GAAZ,CADQ,GAERC,gBAAOC,WAAP,CAAmBL,MAAM,IAAI,CAA7B,EAAgCM,QAAhC,CAAyC,KAAzC,CAFH;;AAIA,MAAIR,UAAU,YAAYS,GAA1B,EAA+B;AAC9B,WAAQT,UAAU,CAACU,GAAX,CAAeP,EAAf,CAAD,GACJJ,KAAK,CAACC,UAAD,EAAaC,IAAb,EAAmBC,MAAnB,CADD,GAEJC,EAFH;AAGA;;AAED,SAAQH,UAAU,CAACW,cAAX,CAA0BR,EAA1B,CAAD,GACJJ,KAAK,CAACC,UAAD,EAAaC,IAAb,EAAmBC,MAAnB,CADD,GAEJC,EAFH;AAGA,CAdD;;;;AAgBA,MAAMS,SAAS,GAAG,CAACZ,UAAD,EAAaE,MAAM,GAAG,CAAtB,KAAqC;AACtD,SAAOH,KAAK,CAACC,UAAD,EAAa,OAAb,EAAsBE,MAAtB,CAAZ;AACA,CAFD;;;;AAIA,MAAMW,SAAS,GAAG,CAACb,UAAD,EAAaE,MAAM,GAAG,CAAtB,KAAqC;AACtD,SAAOH,KAAK,CAACC,UAAD,EAAa,OAAb,EAAsBE,MAAtB,CAAZ;AACA,CAFD;;;;AAIA,MAAMY,YAAY,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAuB;AAC3C,SAAOC,IAAI,CAACC,MAAL,MAAiBF,GAAG,GAAGD,GAAvB,IAA8BA,GAArC;AACA,CAFD;;;;AAIA,MAAMI,SAAS,GAAG,CAACJ,GAAD,EAAMC,GAAN,KAAuB;AACxC,SAAOC,IAAI,CAACG,KAAL,CAAWN,YAAY,CAACC,GAAD,EAAMC,GAAN,CAAvB,CAAP;AACA,CAFD","sourcesContent":["import crypto from 'crypto'\nimport randomWords from 'random-words'\n\nconst idFor = (collection, type, length) : string => {\n\tconst id = (type === 'words')\n\t\t? randomWords({ exactly: length || 3, join: '-', })\n\t\t: crypto.randomBytes(length || 8).toString('hex')\n\n\tif (collection instanceof Map) {\n\t\treturn (collection.has(id))\n\t\t\t? idFor(collection, type, length)\n\t\t\t: id\n\t}\n\n\treturn (collection.hasOwnProperty(id))\n\t\t? idFor(collection, type, length)\n\t\t: id\n}\n\nconst byteIdFor = (collection, length = 8) : string => {\n\treturn idFor(collection, 'bytes', length)\n}\n\nconst wordIdFor = (collection, length = 3) : string => {\n\treturn idFor(collection, 'words', length)\n}\n\nconst randomNumber = (min, max) : number => {\n\treturn Math.random() * (max - min) + min\n}\n\nconst randomInt = (min, max) : number => {\n\treturn Math.round(randomNumber(min, max))\n}\n\nexport {\n\tidFor,\n\tbyteIdFor,\n\twordIdFor,\n\n\trandomNumber,\n\trandomInt,\n}\n"],"file":"random-id.js"}