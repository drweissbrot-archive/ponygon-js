{"version":3,"sources":["../src/Ponygon.ts"],"names":["Ponygon","constructor","lobbies","Map","players","playersBySocket","authorize","authString","parsedAuthString","Player","parseAuthString","id","secret","player","get","createPlayer","name","socket","exactly","join","set","createLobby","leader","lobby","Lobby","getPlayerBySocket","socketId","Socket","attachPlayerToLobby","addPlayer","getLobby","deleteLobby","lobbyId","delete"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;AAEe,MAAMA,OAAN,CAAc;AAOrBC,EAAAA,WAAP,GAAqB;AACpB,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKC,OAAL,GAAe,IAAID,GAAJ,EAAf;AACA,SAAKE,eAAL,GAAuB,IAAIF,GAAJ,EAAvB;AACA;;AAEMG,EAAAA,SAAP,CAAiBC,UAAjB,EAAsD;AACpD,UAAMC,gBAAgB,GAAGC,gBAAOC,eAAP,CAAuBH,UAAvB,CAAzB;;AAED,QAAIC,gBAAgB,KAAK,IAAzB,EAA+B,OAAO,KAAP;AAE/B,UAAM;AAAEG,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAiBJ,gBAAvB;AAEA,UAAMK,MAAM,GAAG,KAAKT,OAAL,CAAaU,GAAb,CAAiBH,EAAjB,CAAf;AAEA,WAAQE,MAAM,IAAIA,MAAM,CAACD,MAAP,KAAkBA,MAA7B,GACJC,MADI,GAEJ,KAFH;AAGA;;AAEME,EAAAA,YAAP,CAAoBC,IAApB,EAAkCC,MAAlC,EAA2D;AAC1D,UAAMN,EAAE,GAAG,wBAAU,KAAKP,OAAf,CAAX;AAEA,UAAMS,MAAM,GAAG,IAAIJ,eAAJ,CAAWE,EAAX,EAAeK,IAAI,IAAI,0BAAY;AAAEE,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,IAAI,EAAE;AAApB,KAAZ,CAAvB,EAA+DF,MAA/D,CAAf;AAEA,SAAKb,OAAL,CAAagB,GAAb,CAAiBT,EAAjB,EAAqBE,MAArB;AACA,SAAKR,eAAL,CAAqBe,GAArB,CAAyBH,MAAM,CAACN,EAAhC,EAAoCE,MAApC;AAEA,WAAOA,MAAP;AACA;;AAEMQ,EAAAA,WAAP,CAAmBC,MAAnB,EAA2C;AAC1C,UAAMX,EAAE,GAAG,wBAAU,KAAKT,OAAf,CAAX,CAD0C,CACP;AACnC;;AAEA,UAAMqB,KAAK,GAAG,IAAIC,cAAJ,CAAUb,EAAV,EAAcW,MAAd,CAAd;AAEA,SAAKpB,OAAL,CAAakB,GAAb,CAAiBT,EAAjB,EAAqBY,KAArB;AAEA,WAAOA,KAAP;AACA;;AAEME,EAAAA,iBAAP,CAAyBR,MAAzB,EAA2D;AAC1D,QAAIS,QAAQ,GAAIT,MAAM,YAAYU,eAAnB,GAA6BV,MAAM,CAACN,EAApC,GAAyCM,MAAxD;AAEA,WAAO,KAAKZ,eAAL,CAAqBS,GAArB,CAAyBY,QAAzB,CAAP;AACA;;AAEME,EAAAA,mBAAP,CAA2Bf,MAA3B,EAA2CU,KAA3C,EAAgE;AAC/D,QAAIV,MAAM,CAACU,KAAX,EAAkB;AACjB,yBAAK,KAAL,EAAYV,MAAM,CAACF,EAAnB,EAAuB,qBAAvB,EAA+C,GAAEY,KAAK,CAACZ,EAAG,qCAA1D;AACA,KAFD,MAEO;AACN,yBAAK,KAAL,EAAYE,MAAM,CAACF,EAAnB,EAAuB,aAAvB,EAAsCY,KAAK,CAACZ,EAA5C;AAEAY,MAAAA,KAAK,CAACM,SAAN,CAAgBhB,MAAhB;AACA;;AAED,WAAO,IAAP;AACA;;AAEMiB,EAAAA,QAAP,CAAgBP,KAAhB,EAAmD;AAClD,WAAO,KAAKrB,OAAL,CAAaY,GAAb,CAAiBS,KAAjB,CAAP;AACA;;AAEMQ,EAAAA,WAAP,CAAmBC,OAAnB,EAAwC;AACvC,UAAMT,KAAK,GAAIS,OAAO,YAAYR,cAApB,GAA6BQ,OAA7B,GAAuC,KAAK9B,OAAL,CAAaY,GAAb,CAAiBkB,OAAjB,CAArD;AAEA,QAAIT,KAAJ,EAAW,KAAKrB,OAAL,CAAa+B,MAAb,CAAoBV,KAAK,CAACZ,EAA1B;AAEX,WAAO,IAAP;AACA;;AA7E2B","sourcesContent":["import Socket from 'socket.io/lib/socket'\nimport randomWords from 'random-words'\n\nimport Lobby from './Lobby'\nimport Player from './Player'\nimport { info, byteIdFor, wordIdFor } from 'helpers'\n\nexport default class Ponygon {\n\tprotected lobbies: Map<string, Lobby>\n\n\tprotected players: Map<string, Player>\n\n\tprotected playersBySocket: Map<string, Player>\n\n\tpublic constructor() {\n\t\tthis.lobbies = new Map()\n\t\tthis.players = new Map()\n\t\tthis.playersBySocket = new Map()\n\t}\n\n\tpublic authorize(authString: string) : Player | false {\n\t \tconst parsedAuthString = Player.parseAuthString(authString)\n\n\t\tif (parsedAuthString === null) return false\n\n\t\tconst { id, secret } = parsedAuthString\n\n\t\tconst player = this.players.get(id)\n\n\t\treturn (player && player.secret === secret)\n\t\t\t? player\n\t\t\t: false\n\t}\n\n\tpublic createPlayer(name: string, socket: Socket) : Player {\n\t\tconst id = byteIdFor(this.players)\n\n\t\tconst player = new Player(id, name || randomWords({ exactly: 2, join: ' ' }), socket)\n\n\t\tthis.players.set(id, player)\n\t\tthis.playersBySocket.set(socket.id, player)\n\n\t\treturn player\n\t}\n\n\tpublic createLobby(leader: Player) : Lobby {\n\t\tconst id = wordIdFor(this.lobbies) // TODO\n\t\t// const id = 'nest-quiet-method' // TODO this is useful for debugging\n\n\t\tconst lobby = new Lobby(id, leader)\n\n\t\tthis.lobbies.set(id, lobby)\n\n\t\treturn lobby\n\t}\n\n\tpublic getPlayerBySocket(socket: any) : Player | undefined {\n\t\tlet socketId = (socket instanceof Socket) ? socket.id : socket\n\n\t\treturn this.playersBySocket.get(socketId)\n\t}\n\n\tpublic attachPlayerToLobby(player: Player, lobby: Lobby) : this {\n\t\tif (player.lobby) {\n\t\t\tinfo('P>L', player.id, 'tried to join lobby', `${lobby.id}, but was already member of a lobby`)\n\t\t} else {\n\t\t\tinfo('P>L', player.id, 'joins lobby', lobby.id)\n\n\t\t\tlobby.addPlayer(player)\n\t\t}\n\n\t\treturn this\n\t}\n\n\tpublic getLobby(lobby: string) : Lobby | undefined {\n\t\treturn this.lobbies.get(lobby)\n\t}\n\n\tpublic deleteLobby(lobbyId: any) : this {\n\t\tconst lobby = (lobbyId instanceof Lobby) ? lobbyId : this.lobbies.get(lobbyId)\n\n\t\tif (lobby) this.lobbies.delete(lobby.id)\n\n\t\treturn this\n\t}\n}\n"],"file":"Ponygon.js"}