{"version":3,"sources":["../../../src/Games/Werewolves/Werewolves.ts"],"names":["defaultRoles","amor","spy","witch","protector","lycanthrope","elder","unfriendlyRoles","Werewolves","Game","constructor","lobby","playersByRole","Map","role","set","resetVictims","assignRoles","emitRoles","resetProtected","phase","night","round","part","nextRound","meta","name","allowJoiningWhileRunning","alivePlayers","players","filter","player","gameData","get","initialGameData","GameData","speakingAllowed","increaseRound","emitPhase","runNight","killEldersIfAppropriate","deaths","handleDeaths","matchHasClinched","handleMayorDeath","runDay","allRoles","Object","assign","roles","getAssigningRoles","_","shuffle","shift","playersWithRole","push","emit","view","data","getWerewolfCount","length","werewolves","i","concat","increasePart","runNightPartOne","runNightPartTwo","runNightPartThree","runNightPartFour","promises","getAutoresolvingPromiseArray","anyPlayersAre","playersOfRole","Promise","resolve","reject","once","playerOne","getPlayerById","playerTwo","inLove","targetId","target","friendly","includes","forPublic","protectedLastNight","protected","all","emitInLove","werewolvesPublic","map","wolf","minVotesForVictim","getMinVoteCount","choices","getVotingChoicesBase","werewolf","on","forEach","wolves","choicesForTarget","id","victim","determineVotingWinner","targets","choice","playerId","entry","entries","victims","canHeal","canKill","werewolfVictim","getAutoresolvingPromise","heal","kill","witches","runDayPartOne","mayor","runDayPartTwo","accusations","runDayPartThree","runDayPartFour","emitActionToAlive","minVotesToWin","votes","votedFor","voters","voter","setMayor","accusers","emitAccusations","Array","from","values","some","accused","emitToAlive","village","min","max","to","other","find","total","preferMayor","elders","uniq","value","keys","join","emitPlayers","deadMayor","getRandomPlayer","alive","forceWin","group","winners","losers","winner","emitWinner","end","forFinalScoreboard","allowed","accusedPlayers","event","includeDead","sample","wasElected"],"mappings":"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","sourcesContent":["import _ from 'lodash'\n\nimport Game from '../Game'\nimport Lobby from '../../Lobby'\nimport Player from '../../Player'\nimport GameData from './GameData'\nimport WerewolvesPhase from './Contracts/Phase'\nimport VictimsObject from './Contracts/VictimsObject'\n\nimport { info, randomNumber, after } from 'helpers'\n\nconst defaultRoles = {\n\tamor: 1,\n\tspy: 3,\n\twitch: 3,\n\t// hunter: 3, // TODO\n\tprotector: 3,\n\t// investigator: 3, // TODO\n\tlycanthrope: 3,\n\telder: 3,\n}\n\nconst unfriendlyRoles = [\n\t'werewolf',\n\t'lycanthrope',\n]\n\nexport default class Werewolves extends Game {\n\tprotected playersByRole: Map<string, Player[]>\n\n\tprotected phase: WerewolvesPhase\n\n\tprotected inLove?: Player[]\n\n\tprotected victims: VictimsObject\n\n\tprotected mayor?: Player\n\n\tprotected winners?: Player[]\n\n\tprotected losers?: Player[]\n\n\tprotected winner?: string\n\n\tprotected protected: Player[]\n\n\tpublic constructor(lobby: Lobby) {\n\t\tsuper(lobby)\n\n\t\tthis.playersByRole = new Map()\n\n\t\tfor (const role in defaultRoles) {\n\t\t\tthis.playersByRole.set(role, [])\n\t\t}\n\n\t\tthis.resetVictims()\n\t\tthis.assignRoles()\n\t\tthis.emitRoles()\n\t\tthis.resetProtected()\n\n\t\tthis.phase = {\n\t\t\tnight: true,\n\t\t\tround: 0,\n\t\t\tpart: 0,\n\t\t}\n\n\t\tafter(5, () => {\n\t\t\tthis.nextRound()\n\t\t})\n\t}\n\n\tpublic get meta() {\n\t\treturn {\n\t\t\tname: 'werewolves',\n\t\t\tallowJoiningWhileRunning: false,\n\t\t}\n\t}\n\n\tprotected get alivePlayers() {\n\t\treturn this.lobby.players.filter((player) => ! player.gameData.get('dead'))\n\t}\n\n\tprotected initialGameData() {\n\t\treturn new GameData()\n\t}\n\n\tprotected async nextRound() : Promise<any> {\n\t\tthis.resetProtected()\n\t\t.speakingAllowed(false)\n\t\t.increaseRound()\n\t\t.emitPhase()\n\n\t\tawait this.runNight()\n\n\t\tthis.killEldersIfAppropriate()\n\n\t\tlet deaths = this.handleDeaths()\n\t\tif (this.matchHasClinched()) return\n\n\t\tawait this.handleMayorDeath(deaths)\n\n\t\tthis.resetProtected()\n\t\t.speakingAllowed(true)\n\n\t\tawait this.runDay(deaths)\n\n\t\tdeaths = this.handleDeaths()\n\t\tif (this.matchHasClinched()) return\n\n\t\tawait this.handleMayorDeath(deaths)\n\n\t\treturn this.emitRoles().nextRound()\n\t}\n\n\tprotected assignRoles() : void {\n\t\tconst allRoles = Object.assign(defaultRoles) // TODO apply config\n\n\t\tlet roles = this.getAssigningRoles(allRoles)\n\n\t\tfor (let player of _.shuffle(this.lobby.players)) {\n\t\t\tconst role = roles.shift() || 'citizen'\n\n\t\t\tplayer.gameData.set('role', role)\n\n\t\t\tconst playersWithRole = this.playersByRole.get(role)\n\n\t\t\tif (! playersWithRole) this.playersByRole.set(role, [player])\n \t\t\telse playersWithRole.push(player)\n\t\t}\n\t}\n\n\tprotected emitRoles() : this {\n\t\tfor (const player of this.alivePlayers) {\n\t\t\tplayer.emit('role', { role: player.gameData.get('role') })\n\t\t\t.emit('action', {\n\t\t\t\tview: 'role-interstitial',\n\t\t\t\tdata: {\n\t\t\t\t\trole: player.gameData.get('role'),\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\treturn this\n\t}\n\n\tprotected getWerewolfCount() : number {\n\t\tif (this.lobby.players.length <= 4) return 1\n\t\tif (this.lobby.players.length <= 7) return 2\n\t\tif (this.lobby.players.length <= 11) return 3\n\t\tif (this.lobby.players.length <= 14) return 4\n\t\tif (this.lobby.players.length <= 17) return 5\n\n\t\treturn 6\n\t}\n\n\tprotected getAssigningRoles(allRoles: object) : string[] {\n\t\tlet roles: string[] = []\n\t\tlet werewolves: string[] = []\n\n\t\tfor (let i = 0; i < this.getWerewolfCount(); i++) {\n\t\t\twerewolves.push('werewolf')\n\t\t}\n\n\t\tfor (const role in allRoles) {\n\t\t\tfor (let i = 0; i < allRoles[role]; i++) {\n\t\t\t\troles.push(role)\n\t\t\t}\n\t\t}\n\n\t\treturn werewolves.concat(_.shuffle(roles))\n\t}\n\n\tprotected emitPhase() : this {\n\t\tthis.lobby.emit('phase', { phase: this.phase })\n\n\t\treturn this\n\t}\n\n\tprotected increaseRound() : this {\n\t\tthis.phase = {\n\t\t\tnight: true,\n\t\t\tround: this.phase.round + 1,\n\t\t\tpart: 1,\n\t\t}\n\n\t\treturn this\n\t}\n\n\tprotected increasePart() : this {\n\t\tthis.phase.part++\n\n\t\treturn this\n\t}\n\n\tprotected async runNight() {\n\t\tthis.phase.night = true\n\t\tthis.phase.part = 1\n\n\t\tawait this.runNightPartOne()\n\t\tthis.increasePart().emitPhase()\n\n\t\t// amor lovers\n\t\tif (this.phase.round === 1) {\n\t\t\tawait this.runNightPartTwo()\n\t\t\tthis.increasePart().emitPhase()\n\t\t}\n\n\t\tawait this.runNightPartThree()\n\t\tthis.increasePart().emitPhase()\n\n\t\tawait this.runNightPartFour()\n\t}\n\n\tprotected runNightPartOne() : Promise<any> {\n\t\tlet promises = this.getAutoresolvingPromiseArray()\n\n\t\t// amor\n\t\tif (this.phase.round === 1 && this.anyPlayersAre('amor')) {\n\t\t\tconst amor = this.playersOfRole('amor')[0]\n\n\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\tamor.emit('action', { view: 'amor choose' })\n\t\t\t\t.once('amor choice', ({ players }: { players: string[] }) => {\n\t\t\t\t\tif (players.length !== 2) return resolve()\n\n\t\t\t\t\tconst playerOne = this.getPlayerById(players[0])\n\t\t\t\t\tconst playerTwo = this.getPlayerById(players[1])\n\n\t\t\t\t\tif (! playerOne || ! playerTwo) return resolve()\n\n\t\t\t\t\tplayerOne.gameData.set('inLoveWith', playerTwo)\n\t\t\t\t\tplayerTwo.gameData.set('inLoveWith', playerOne)\n\t\t\t\t\tthis.inLove = [ playerOne, playerTwo ]\n\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\n\t\t\t\t// TODO force resolve after some time\n\t\t\t}))\n\t\t}\n\n\t\t// spy\n\t\tif (this.anyPlayersAre('spy')) {\n\t\t\tfor (const spy of this.playersOfRole('spy')) {\n\t\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\t\tspy.emit('action', { view: 'spy choose' })\n\t\t\t\t\t.once('spy choice', ({ player: targetId }: { player: string }) => {\n\t\t\t\t\t\tconst target = this.getPlayerById(targetId)\n\t\t\t\t\t\tif (! target) return resolve()\n\n\t\t\t\t\t\tconst friendly = ! unfriendlyRoles.includes(target.gameData.get('role'))\n\n\t\t\t\t\t\tspy.emit('action', {\n\t\t\t\t\t\t\tview: 'spy result',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tfriendly,\n\t\t\t\t\t\t\t\tplayer: target.forPublic,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tafter(4, resolve)\n\t\t\t\t\t})\n\n\t\t\t\t\t// TODO force resolve after some time\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n\t\t// protector\n\t\tif (this.anyPlayersAre('protector')) {\n\t\t\tfor (const protector of this.playersOfRole('protector')) {\n\t\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\t\tconst protectedLastNight = protector.gameData.get('protectedLastNight')\n\n\t\t\t\t\tprotector.emit('action', {\n\t\t\t\t\t\tview: 'protector choose',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tprotectedLastNight: protectedLastNight ? protectedLastNight.forPublic : null,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.once('protector choice', ({ player: targetId }: { player: string }) => {\n\t\t\t\t\t\tconst target = this.getPlayerById(targetId)\n\n\t\t\t\t\t\tif (! target || protector.gameData.get('protectedLastNight') === target) return resolve()\n\n\t\t\t\t\t\tprotector.gameData.set('protectedLastNight', target)\n\n\t\t\t\t\t\tthis.protected.push(target)\n\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t})\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n\t\t// TODO investigator\n\n\t\treturn Promise.all(promises)\n\t}\n\n\tprotected runNightPartTwo() : Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.inLove) {\n\t\t\t\tthis.emitInLove(this.inLove[0], this.inLove[1])\n\t\t\t\t.emitInLove(this.inLove[1], this.inLove[0])\n\t\t\t}\n\n\t\t\tafter(6, resolve)\n\t\t})\n\t}\n\n\tprotected runNightPartThree() : Promise<any> {\n\t\tconst werewolves = this.playersOfRole('werewolf')\n\n\t\tconst werewolvesPublic = werewolves.map((wolf) => wolf.forPublic)\n\t\tconst minVotesForVictim = this.getMinVoteCount(werewolves.length)\n\n\t\tlet choices = this.getVotingChoicesBase()\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfor (const werewolf of werewolves) {\n\t\t\t\twerewolf.emit('action', {\n\t\t\t\t\tview: 'werewolf choose',\n\t\t\t\t\tdata: { werewolves: werewolvesPublic },\n\t\t\t\t})\n\n\t\t\t\twerewolf.on('werewolf choice', ({ player }: { player: string }) => {\n\t\t\t\t\tconst target = this.getPlayerById(player)\n\t\t\t\t\tif (! target) return\n\n\t\t\t\t\t// remove previous choice this wolf made\n\t\t\t\t\tchoices.forEach((wolves, targetId) => {\n\t\t\t\t\t\tchoices.set(targetId, wolves.filter((wolf) => wolf !== werewolf))\n\t\t\t\t\t})\n\n\t\t\t\t\t// apply current choice this wolf made\n\t\t\t\t\tlet choicesForTarget = choices.get(target.id)\n\t\t\t\t\tif (! choicesForTarget) return\n\n\t\t\t\t\tchoicesForTarget.push(werewolf)\n\n\t\t\t\t\t// decide if the victim has enough votes\n\t\t\t\t\tconst victim = this.determineVotingWinner(choices, minVotesForVictim, false)\n\n\t\t\t\t\tif (! victim) {\n\t\t\t\t\t\tlet targets: object[] = []\n\n\t\t\t\t\t\tfor (const wolf of werewolves) {\n\t\t\t\t\t\t\tlet data: any = { wolf: wolf.forPublic, choice: null }\n\n\t\t\t\t\t\t\tlet playerId\n\t\t\t\t\t\t\tfor (const entry of choices.entries()) {\n\t\t\t\t\t\t\t\tif (entry[1].includes(wolf)) {\n\t\t\t\t\t\t\t\t\tplayerId = entry[0]\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst player = this.getPlayerById(playerId)\n\t\t\t\t\t\t\tif (player) data.choice = player.forPublic\n\n\t\t\t\t\t\t\ttargets.push(data)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const wolf of werewolves) {\n\t\t\t\t\t\t\twolf.emit('werewolf choices', { choices: targets })\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.victims.werewolves = victim\n\n\t\t\t\t\t\tfor (const wolf of werewolves) {\n\t\t\t\t\t\t\twolf.emit('action', {\n\t\t\t\t\t\t\t\tview: 'werewolf result',\n\t\t\t\t\t\t\t\tdata: { victim: victim.forPublic },\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// TODO force resolve after some time\n\t\t})\n\t}\n\n\tprotected runNightPartFour() : Promise<any> {\n\t\tlet promises = this.getAutoresolvingPromiseArray()\n\n\t\t// witch\n\t\tif (! this.anyPlayersAre('witch')) return Promise.all(promises)\n\n\t\tfor (const witch of this.playersOfRole('witch')) {\n\t\t\tconst canHeal = ! witch.gameData.get('hasHealed')\n\t\t\tconst canKill = ! witch.gameData.get('hasKilled')\n\n\t\t\twitch.emit('action', {\n\t\t\t\tview: 'witch choose',\n\t\t\t\tdata: {\n\t\t\t\t\tcanHeal, canKill,\n\t\t\t\t\twerewolfVictim: this.victims.werewolves ? this.victims.werewolves.forPublic : null,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (! canHeal && ! canKill) {\n\t\t\t\tpromises.push(this.getAutoresolvingPromise(4, 4))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\twitch.once('witch choice', ({ heal, kill }: { heal: boolean, kill?: string }) => {\n\t\t\t\t\tif (canHeal && heal && this.victims.werewolves) {\n\t\t\t\t\t\tthis.protected.push(this.victims.werewolves)\n\t\t\t\t\t\twitch.gameData.set('hasHealed', true)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (canKill && kill) {\n\t\t\t\t\t\tconst target = this.getPlayerById(kill)\n\n\t\t\t\t\t\tif (target) {\n\t\t\t\t\t\t\tthis.victims.witches.push(target)\n\t\t\t\t\t\t\twitch.gameData.set('hasKilled', true)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\n\t\t\t\t// TODO force resolve after some time\n\t\t\t}))\n\t\t}\n\n\t\treturn Promise.all(promises)\n\t}\n\n\tprotected async runDay(deaths: Player[]) {\n\t\tthis.phase.night = false\n\t\tthis.phase.part = 1\n\t\tthis.emitPhase()\n\n\t\t// deaths\n\t\tawait this.runDayPartOne(deaths)\n\t\tthis.increasePart().emitPhase()\n\n\t\t// mayor\n\t\tif (! this.mayor || this.mayor.gameData.get('dead')) {\n\t\t\tawait this.runDayPartTwo()\n\t\t\tthis.increasePart().emitPhase()\n\t\t}\n\n\t\t// discussion/accusations\n\t\tconst accusations = await this.runDayPartThree()\n\t\tthis.increasePart().emitPhase()\n\n\t\t// voting\n\t\tawait this.runDayPartFour(accusations)\n\t}\n\n\tprotected runDayPartOne(deaths: Player[]) : Promise<any> {\n\t\tthis.emitActionToAlive('daytime deaths', {\n\t\t\tdeaths: deaths.map((player) => player.forPublic),\n\t\t})\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tafter(7.5, resolve)\n\t\t})\n\t}\n\n\tprotected runDayPartTwo() : Promise<any> {\n\t\tconst minVotesToWin = this.getMinVoteCount(this.alivePlayers.length)\n\t\tlet votes = this.getVotingChoicesBase()\n\t\tlet promises: Promise<any>[] = []\n\n\t\tthis.emitActionToAlive('daytime mayor')\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfor (const player of this.alivePlayers) {\n\t\t\t\tplayer.on('vote for mayor', ({ player: votedFor }: { player: string }) => {\n\t\t\t\t\tconst target = this.getPlayerById(votedFor)\n\t\t\t\t\tif (! target) return\n\n\t\t\t\t\t// remove previous choice this player made\n\t\t\t\t\tvotes.forEach((voters, targetId) => {\n\t\t\t\t\t\tvotes.set(targetId, voters.filter((voter) => voter !== player))\n\t\t\t\t\t})\n\n\t\t\t\t\t// apply current choice this player made\n\t\t\t\t\tlet choicesForTarget = votes.get(target.id)\n\t\t\t\t\tif (! choicesForTarget) return\n\n\t\t\t\t\tchoicesForTarget.push(player)\n\n\t\t\t\t\t// decide if the player has enough votes\n\t\t\t\t\tconst mayor = this.determineVotingWinner(votes, minVotesToWin)\n\t\t\t\t\tif (! mayor) return\n\n\t\t\t\t\tthis.setMayor(mayor)\n\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\tprotected runDayPartThree() : Promise<Map<string, Player[]>> {\n\t\tthis.emitActionToAlive('daytime accusations')\n\n\t\tlet accusations = this.getVotingChoicesBase()\n\n\t\tfor (const player of this.alivePlayers) {\n\t\t\tplayer.on('accuse', ({ player: votedFor }: { player: string }) => {\n\t\t\t\tconst target = this.getPlayerById(votedFor)\n\t\t\t\tif (! target) return\n\n\t\t\t\t// remove previous choice this player made\n\t\t\t\taccusations.forEach((accusers, targetId) => {\n\t\t\t\t\taccusations.set(targetId, accusers.filter((voter) => voter !== player))\n\t\t\t\t})\n\n\t\t\t\t// apply current choice this player made\n\t\t\t\tlet choicesForTarget = accusations.get(target.id)\n\t\t\t\tif (! choicesForTarget) return\n\n\t\t\t\tchoicesForTarget.push(player)\n\n\t\t\t\tthis.emitAccusations(accusations)\n\t\t\t})\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (! this.mayor) return after(60, () => resolve(accusations))\n\n\t\t\tthis.mayor.once('mayor continue to voting', () => {\n\t\t\t\tif (Array.from(accusations.values()).some((accusers) => accusers.length > 0)) resolve(accusations)\n\t\t\t})\n\t\t})\n\t}\n\n\tprotected runDayPartFour(accusations: Map<string, Player[]>) : Promise<any> {\n\t\tlet accused: object[] = []\n\n\t\tfor (const entry of accusations.entries()) {\n\t\t\tif (! entry[1].length) continue\n\n\t\t\tconst player = this.getPlayerById(entry[0])\n\t\t\tif (player) accused.push(player.forPublic)\n\t\t}\n\n\t\tthis.emitToAlive('action', {\n\t\t\tview: 'daytime voting',\n\t\t\tdata: { accused },\n\t\t})\n\n\t\tlet votes = this.getVotingChoicesBase()\n\t\tconst minVotesForVictim = this.getMinVoteCount(this.alivePlayers.length)\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfor (const player of this.alivePlayers) {\n\t\t\t\tplayer.on('vote', ({ player: votedFor }: { player: string }) => {\n\t\t\t\t\tconst target = this.getPlayerById(votedFor)\n\t\t\t\t\tif (! target) return\n\n\t\t\t\t\t// remove previous choice this player made\n\t\t\t\t\tvotes.forEach((voters, targetId) => {\n\t\t\t\t\t\tvotes.set(targetId, voters.filter((voter) => voter !== player))\n\t\t\t\t\t})\n\n\t\t\t\t\t// apply current choice this player made\n\t\t\t\t\tlet choicesForTarget = votes.get(target.id)\n\t\t\t\t\tif (! choicesForTarget) return\n\n\t\t\t\t\tchoicesForTarget.push(player)\n\n\t\t\t\t\t// decide if the victim has enough votes\n\t\t\t\t\tconst victim = this.determineVotingWinner(votes, minVotesForVictim)\n\t\t\t\t\tif (! victim) return\n\n\t\t\t\t\tthis.victims.village = victim\n\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\tprotected playersOfRole(role: string) : Player[] {\n\t\treturn this.playersByRole.get(role) || []\n\t}\n\n\tprotected anyPlayersAre(role: string) : boolean {\n\t\treturn !! this.playersOfRole(role).length\n\t}\n\n\tprotected getAutoresolvingPromise(min = 4, max = 15) : Promise<never> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tafter(randomNumber(min, max), resolve)\n\t\t})\n\t}\n\n\tprotected getAutoresolvingPromiseArray(min = 4, max = 15) : Promise<never>[] {\n\t\treturn [ this.getAutoresolvingPromise(min, max) ]\n\t}\n\n\tprotected emitInLove(to: Player, other: Player) : this {\n\t\tto.emit('action', {\n\t\t\tview: 'amor in-love',\n\t\t\tdata: {\n\t\t\t\tother: Object.assign({ role: other.gameData.get('role') }, other.forPublic),\n\t\t\t},\n\t\t})\n\n\t\treturn this\n\t}\n\n\tprotected getPlayerById(id: string) : Player | undefined {\n\t\treturn this.lobby.players.find((player) => player.id === id)\n\t}\n\n\tprotected getVotingChoicesBase() : Map<string, Player[]> {\n\t\tlet choices: Map<string, Player[]> = new Map()\n\n\t\tfor (const player of this.alivePlayers) {\n\t\t\tchoices.set(player.id, [])\n\t\t}\n\n\t\treturn choices\n\t}\n\n\tprotected getMinVoteCount(total: number) : number {\n\t\tif (total < 2) return total\n\n\t\treturn total / 1.99 // we always need more than 50%\n\t}\n\n\tprotected determineVotingWinner(\n\t\tchoices: Map<string, Player[]>,\n\t\tminVotesForVictim: number,\n\t\tpreferMayor: boolean = true,\n\t) : Player | false {\n\t\tfor (const target of choices.entries()) {\n\t\t\tlet votes = target[1].length\n\t\t\tif (preferMayor && this.mayor && target[1].includes(this.mayor)) votes += .5\n\n\t\t\tif (votes >= minVotesForVictim) {\n\t\t\t\treturn this.getPlayerById(target[0]) || false\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\tprotected resetVictims() : this {\n\t\tthis.victims = {\n\t\t\tvillage: null,\n\t\t\twerewolves: null,\n\t\t\t// hunter: null,\n\t\t\twitches: [],\n\t\t\telders: [],\n\t\t}\n\n\t\treturn this\n\t}\n\n\tprotected resetProtected() : this {\n\t\tthis.protected = []\n\n\t\treturn this\n\t}\n\n\tprotected handleDeaths() : Player[] {\n\t\tlet deaths: Player[] = []\n\n\t\t// add werewolf victim\n\t\tif (this.victims.werewolves) deaths.push(this.victims.werewolves)\n\n\t\t// add witch victims\n\t\tdeaths.push(...this.victims.witches)\n\n\t\t// add village victim\n\t\tif (this.victims.village) deaths.push(this.victims.village)\n\n\t\t// remove any protected victims\n\t\tdeaths = deaths.filter((player) => ! this.protected.includes(player))\n\n\t\t// handle lovers\n\t\tif (this.inLove && (deaths.includes(this.inLove[0]) || deaths.includes(this.inLove[1]))) {\n\t\t\tdeaths.push(...this.inLove)\n\t\t}\n\n\t\t// add elders\n\t\tdeaths.push(...this.victims.elders)\n\n\t\tdeaths = _(deaths).uniq().value()\n\n\t\t// kill players\n\t\tfor (const player of deaths) {\n\t\t\tplayer.gameData.set('dead', true)\n\t\t\tplayer.emit('dead')\n\t\t}\n\n\t\t// clean up role arrays\n\t\tfor (const role of this.playersByRole.keys()) {\n\t\t\tconst playersOfRole = this.playersByRole.get(role)\n\t\t\tif (! playersOfRole) continue\n\n\t\t\tthis.playersByRole.set(role, playersOfRole.filter((player) => ! player.gameData.get('dead')))\n\t\t}\n\n\t\tif (deaths.length) this.lobby.emit('log', deaths.map((player) => player.name).join(', ') + ' died.')\n\t\telse this.lobby.emit('log', 'No-one died.')\n\n\t\tthis.lobby.emitPlayers()\n\t\tthis.resetVictims()\n\n\t\treturn deaths\n\t}\n\n\t// protected async handleHunterDeaths(deaths: Player[]) : Promise<Player[] | undefined> {\n\t// \tconst deadHunters = deaths.filter((player) => player.gameData.get('role') === 'hunter')\n\t// \tif (! deadHunters.length) return Promise.all([])\n\t//\n\t// \tlet killed = []\n\t//\n\t// \tfor (const hunter of deadHunters) {\n\t// \t\tkilled.push(... await this.getHunterVictim(hunter))\n\t// \t}\n\t//\n\t// \treturn killed\n\t// }\n\t//\n\t// protected getHunterVictim(hunter: Player) : Promise<Player[]> {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\thunter.emit('action', { view: 'hunter choose' })\n\t// \t\t.once('hunter choice', async ({ player }: { player: string }) => {\n\t// \t\t\thunter.emit('clear action')\n\t//\n\t// \t\t\tconst victim = this.getPlayerById(player)\n\t// \t\t\tif (! victim) return resolve()\n\t//\n\t// \t\t\tthis.victims.hunter = victim\n\t//\n\t// \t\t\tconst deaths = this.killVictims()\n\t// \t\t\tawait this.handleHunterDeaths(deaths)\n\t// \t\t\tawait this.handleMayorDeath(deaths)\n\t//\n\t// \t\t\tresolve()\n\t// \t\t})\n\t//\n\t// \t\t// TODO force resolve after some time\n\t// \t})\n\t// }\n\n\tprotected async handleMayorDeath(deaths: Player[]) : Promise<any> {\n\t\tconst deadMayor = deaths.find((player) => player.gameData.get('mayor'))\n\t\tif (! deadMayor) return Promise.all([])\n\n\t\tdeadMayor.emit('action', { view: 'mayor choose successor' })\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdeadMayor.once('mayor choice', ({ player: playerId }: { player: string }) => {\n\t\t\t\tdeadMayor.emit('clear action')\n\n\t\t\t\tlet target = this.getPlayerById(playerId)\n\t\t\t\tif (! target) target = this.getRandomPlayer()\n\n\t\t\t\tthis.setMayor(target, false)\n\n\t\t\t\tresolve()\n\t\t\t})\n\n\t\t\t// TODO force resolve after some time\n\t\t})\n\t}\n\n\tprotected matchHasClinched() : boolean {\n\t\tconst alive = this.alivePlayers\n\n\t\tif (alive.length === 2 && this.inLove\n\t\t\t&& alive[0].gameData.get('inLoveWith')\n\t\t\t&& alive[0].gameData.get('inLoveWith') === alive[1]) {\n\t\t\treturn this.forceWin('lovers', this.inLove)\n\t\t}\n\n\t\tconst werewolves = alive.filter((player) => player.gameData.get('role') === 'werewolf')\n\n\t\tif (werewolves.length === 0) {\n\t\t\treturn this.forceWin('citizens', this.lobby.players.filter((player) => player.gameData.get('role') !== 'werewolf'))\n\t\t}\n\n\t\tif (werewolves.length === alive.length) {\n\t\t\treturn this.forceWin('werewolves', this.lobby.players.filter((player) => player.gameData.get('role') === 'werewolf'))\n\t\t}\n\n\t\treturn false\n\t}\n\n\tprotected forceWin(group: string, players: Player[]) : true {\n\t\tthis.winners = players\n\t\tthis.losers = this.lobby.players.filter((player) => ! players.includes(player))\n\t\tthis.winner = group\n\n\t\tthis.emitWinner()\n\t\tthis.end()\n\n\t\treturn true\n\t}\n\n\tprotected emitWinner() : void {\n\t\tif (! this.winner || ! this.winners || ! this.losers) return\n\n\t\tthis.lobby.emit('action', {\n\t\t\tview: 'gg wp',\n\t\t\tdata: {\n\t\t\t\twinner: this.winner,\n\t\t\t\twinners: this.winners.map((player) => player.forFinalScoreboard),\n\t\t\t\tlosers: this.losers.map((player) => player.forFinalScoreboard),\n\t\t\t},\n\t\t})\n\t}\n\n\tprotected speakingAllowed(allowed: boolean) : this {\n\t\tthis.lobby.emit('speaking allowed', allowed)\n\n\t\treturn this\n\t}\n\n\tprotected emitAccusations(accusations: Map<string, Player[]>) : this {\n\t\tlet accusedPlayers: object[] = []\n\n\t\tfor (const playerId of accusations.keys()) {\n\t\t\tconst accusers = accusations.get(playerId)\n\t\t\tif (! accusers || ! accusers.length) continue\n\n\t\t\tconst player = this.getPlayerById(playerId)\n\t\t\tif (! player) continue\n\n\t\t\taccusedPlayers.push(player.forPublic)\n\t\t}\n\n\t\tthis.lobby.emit('accusations', { accusations: accusedPlayers })\n\n\t\treturn this\n\t}\n\n\tprotected emitToAlive(event: string, data?: any) : this {\n\t\tfor (const player of this.alivePlayers) {\n\t\t\tplayer.emit(event, data)\n\t\t}\n\n\t\treturn this\n\t}\n\n\tprotected emitActionToAlive(view: string, data?: any) : this {\n\t\tthis.emitToAlive('action', { view, data })\n\n\t\treturn this\n\t}\n\n\tprotected getRandomPlayer(includeDead: boolean = false) : Player {\n\t\treturn _.sample(includeDead ? this.lobby.players : this.alivePlayers)\n\t}\n\n\tprotected setMayor(mayor: Player, wasElected: boolean = true) : this {\n\t\tthis.mayor = mayor\n\t\tthis.mayor.gameData.set('mayor', true)\n\t\tthis.mayor.emit('mayor')\n\n\t\tif (wasElected) this.lobby.emit('log', `${mayor.name} was elected mayor.`)\n\t\telse this.lobby.emit('log', `${mayor.name} was chosen as new mayor.`)\n\n\t\tthis.lobby.emitPlayers()\n\n\t\treturn this\n\t}\n\n\tprotected killEldersIfAppropriate() : this {\n\t\tif (this.phase.round === this.playersOfRole('werewolf').length + 1) {\n\t\t\tthis.victims.elders = this.playersOfRole('elder')\n\t\t}\n\n\t\treturn this\n\t}\n}\n"],"file":"Werewolves.js"}